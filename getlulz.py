#!/usr/bin/env python
#-*-coding: utf-8 -*-

import urllib2, re, sys
from optparse import OptionParser
from urlparse import urlparse

img_regexp = re.compile('href="([^\"]*(?:jpg|jpeg|png|gif))"')

# omits repeated strings in img_urls_nonunique, outputs a unique list img_urls
def uniq(img_urls_nonunique):
	img_urls = []
	for i in img_urls_nonunique:
		if i not in img_urls:
			img_urls.append(i)
	return img_urls

# reads the url, outputs HTML (most of the time)
def read_url(url):
	usock = urllib2.urlopen(url)
	rawdata = usock.read()
	usock.close()
	return rawdata

# parses the raw_data
def parse(raw_data):
	img_urls_nonunique = img_regexp.findall(raw_data)
	img_urls = uniq(img_urls_nonunique)
	return img_urls

# outputs URL's to the HTML file
def output_html(img_urls,filename):
	html = '<html><head><title>lulzparser</title></head><body>\n\n<h1>generated by <a href="http://github.com/artemy/lulzparser/">lulzparser</a></h1>\n\n'

	for url in img_urls:
		html += '<p><input type="text" value="' + url + '" size="' + str(len(url)) + '"></p>\n<p><img src="' + url + '"></p>\n\n'

	html += '</body></html>'
	f = open(filename, 'w')
	f.write(html)
	f.close

# outputs URL's to the stdout
def output_stdout(img_urls):
	for url in img_urls:
		print url

def main():
	# optparse
	parser = OptionParser("usage: %prog [OPTION] [URL]")
	parser.add_option("-o", "--output-file", dest="filename", type="string",help="If specified, lulzparser will generate a HTML document instead of printing all the URL's to stdout.")
	(options, args) = parser.parse_args()

	# some variables
	url = args[0]
	filename = options.filename

	# read url and parse the data
	raw_data = read_url(url)
	img_urls = parse(raw_data)

	# do some URL fixes
	domain = urlparse(url).netloc
	prepend = ''

	if domain == '2ch.so':
		prepend = 'http://2ch.so'
	elif domain == 'boards.4chan.org':
		prepend = 'http:'

	if prepend != '':
		for i in range(len(img_urls)):
			img_urls[i] = prepend + img_urls[i]

	# output
	if filename:
		output_html(img_urls,filename)
	else:
		output_stdout(img_urls)

if __name__=="__main__":
	main()
